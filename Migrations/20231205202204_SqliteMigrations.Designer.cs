// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

#nullable disable

namespace bancodedados.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231205202204_SqliteMigrations")]
    partial class SqliteMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("CategoryModelPostModel", b =>
                {
                    b.Property<Guid>("Categoriesguid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Postsguid")
                        .HasColumnType("TEXT");

                    b.HasKey("Categoriesguid", "Postsguid");

                    b.HasIndex("Postsguid");

                    b.ToTable("CategoryModelPostModel");
                });

            modelBuilder.Entity("Models.CategoryModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("guid_parent")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("guid");

                    b.HasIndex("guid_parent");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.CollaborationModel", b =>
                {
                    b.Property<string>("user_email")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid_post")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid_Collaboration_permission")
                        .HasColumnType("TEXT");

                    b.HasKey("user_email", "guid_post");

                    b.HasIndex("guid_Collaboration_permission");

                    b.HasIndex("guid_post");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("Models.CollaborationPermissionModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("guid");

                    b.ToTable("CollaborationPermissions");
                });

            modelBuilder.Entity("Models.CommentModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid_post")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("publish_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("user_email")
                        .HasColumnType("TEXT");

                    b.HasKey("guid");

                    b.HasIndex("guid_post");

                    b.HasIndex("user_email");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Models.LikeModel", b =>
                {
                    b.Property<string>("user_email")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid_post")
                        .HasColumnType("TEXT");

                    b.HasKey("user_email", "guid_post");

                    b.HasIndex("guid_post");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Models.PostModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("subtitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("user_email")
                        .HasColumnType("TEXT");

                    b.HasKey("guid");

                    b.HasIndex("user_email");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Models.UserModel", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid_permission")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int>("pass_hash")
                        .HasColumnType("INTEGER");

                    b.HasKey("email");

                    b.HasIndex("guid_permission");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.UserPermissionModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("guid");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("CategoryModelPostModel", b =>
                {
                    b.HasOne("Models.CategoryModel", null)
                        .WithMany()
                        .HasForeignKey("Categoriesguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.PostModel", null)
                        .WithMany()
                        .HasForeignKey("Postsguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.CategoryModel", b =>
                {
                    b.HasOne("Models.CategoryModel", "Parent")
                        .WithMany()
                        .HasForeignKey("guid_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Models.CollaborationModel", b =>
                {
                    b.HasOne("Models.CollaborationPermissionModel", "CollaborationPermission")
                        .WithMany()
                        .HasForeignKey("guid_Collaboration_permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.PostModel", "Post")
                        .WithMany("Collaborations")
                        .HasForeignKey("guid_post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UserModel", "User")
                        .WithMany("Collaborations")
                        .HasForeignKey("user_email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollaborationPermission");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.CommentModel", b =>
                {
                    b.HasOne("Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("guid_post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UserModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("user_email");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.LikeModel", b =>
                {
                    b.HasOne("Models.PostModel", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("guid_post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UserModel", "User")
                        .WithMany("Likes")
                        .HasForeignKey("user_email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.PostModel", b =>
                {
                    b.HasOne("Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("user_email");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserModel", b =>
                {
                    b.HasOne("Models.UserPermissionModel", "UserPermission")
                        .WithMany("Users")
                        .HasForeignKey("guid_permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPermission");
                });

            modelBuilder.Entity("Models.PostModel", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Models.UserModel", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Models.UserPermissionModel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
